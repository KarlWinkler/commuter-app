// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: trip_queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trip (name, distance, mode)
VALUES ($1, $2, $3)
RETURNING id, name, distance, mode
`

type CreateTripParams struct {
	Name     sql.NullString
	Distance int32
	Mode     sql.NullInt32
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, createTrip, arg.Name, arg.Distance, arg.Mode)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Distance,
		&i.Mode,
	)
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT id, name, distance, mode FROM trip
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.QueryContext(ctx, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Distance,
			&i.Mode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
